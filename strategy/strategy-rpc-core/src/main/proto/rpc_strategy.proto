//
// this file is automatically generated
// @Preserve
//
syntax = "proto3";
option java_generic_services = true;
option java_package = "org.marketcetera.strategy";
option java_outer_classname = "StrategyRpc";
import "rpc_base.proto";
import "rpc_paging.proto";
import "rpc_strategy_types.proto";

// request the loaded strategy instances
message ReadStrategyInstancesRequest {
    string sessionId = 1; // session id of the authenticated session
}

// return the loaded strategy instances
message ReadStrategyInstancesResponse {
    PageResponse pageResponse = 1;
    repeated StrategyInstance strategyInstances = 2;
}

// loads a new strategy instance
message LoadStrategyInstanceRequest {
    string sessionId = 1; // session id of the authenticated session
    StrategyInstance strategyInstance = 2;
}

// returns the load strategy instance response
message LoadStrategyInstanceResponse {
    StrategyStatus status = 1;
}

// unloads a new strategy instance
message UnloadStrategyInstanceRequest {
    string sessionId = 1; // session id of the authenticated session
    string name = 2;
}

// returns the unload strategy instance response
message UnloadStrategyInstanceResponse {
}

message FileUploadRequest {
  oneof request {
    FileUploadMetaData metadata = 1;
    UploadFile file = 2;
  }
}

message FileUploadResponse {
  string name = 1;
  FileUploadStatus status = 2;
}

// get the strategy instance with the given name
message FindStrategyInstanceByNameRequest {
    string sessionId = 1; // session id of the authenticated session
    string name = 2; // name of the strategy instance to find
}

// returns the find by name strategy instance response
message FindStrategyInstanceByNameResponse {
    StrategyInstance strategyInstance = 1;
}

// services for Strategy
service StrategyRpcService {
    rpc login(LoginRequest) returns (LoginResponse); // starts the session
    rpc logout(LogoutRequest) returns (LogoutResponse); // ends the session
    rpc heartbeat(HeartbeatRequest) returns (HeartbeatResponse); // keeps the session alive
    rpc getStrategyInstances(ReadStrategyInstancesRequest) returns (ReadStrategyInstancesResponse); // requests loaded strategy instances
    rpc loadStrategyInstance(LoadStrategyInstanceRequest) returns (LoadStrategyInstanceResponse); // load a new strategy instances
    rpc unloadStrategyInstance(UnloadStrategyInstanceRequest) returns (UnloadStrategyInstanceResponse); // unload a strategy instance
    rpc findByName(FindStrategyInstanceByNameRequest) returns (FindStrategyInstanceByNameResponse); // finds the strategy instance with the given name
    rpc uploadFile(stream FileUploadRequest) returns(FileUploadResponse);
}
