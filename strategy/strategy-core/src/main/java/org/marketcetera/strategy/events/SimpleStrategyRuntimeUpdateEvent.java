//
// this file is automatically generated
//
package org.marketcetera.strategy.events;

import org.marketcetera.core.Preserve;
import org.marketcetera.strategy.StrategyInstance;

/* $License$ */

/**
 * Indicates that a strategy runtime has changed.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
@Preserve
public class SimpleStrategyRuntimeUpdateEvent
        implements StrategyRuntimeUpdateEvent
{
    /**
     * Create a new SimpleStrategyRuntimeUpdateEvent instance.
     */
    public SimpleStrategyRuntimeUpdateEvent() {}
    /**
     * Create a new SimpleStrategyRuntimeUpdateEvent instance.
     *
     * @param inRunningStrategyInstance a <code>StrategyInstance</code> value
     */
    public SimpleStrategyRuntimeUpdateEvent(StrategyInstance inRunningStrategyInstance)
    {
        strategyInstance = inRunningStrategyInstance;
    }
    /**
     * Get the strategyInstance value.
     *
     * @return an <code>org.marketcetera.strategy.StrategyInstance</code> value
     */
    @Override
    public org.marketcetera.strategy.StrategyInstance getStrategyInstance()
    {
        return strategyInstance;
    }
    /**
     * Set the strategyInstance value.
     *
     * @param inStrategyInstance an <code>org.marketcetera.strategy.StrategyInstance</code> value
     */
    public void setStrategyInstance(org.marketcetera.strategy.StrategyInstance inStrategyInstance)
    {
        strategyInstance = inStrategyInstance;
    }
    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString()
    {
        StringBuilder builder = new StringBuilder();
        builder.append("StrategyRuntimeUpdateEvent [")
            .append("strategyInstance=").append(strategyInstance).append("]");
        return builder.toString();
    }
    /**
     * strategy instance for which the runtime is being updated
     */
    private org.marketcetera.strategy.StrategyInstance strategyInstance;
}
