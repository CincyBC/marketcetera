//
// this file is automatically generated
//
package org.marketcetera.strategy;

/* $License$ */

/**
 * Provides an RPC Server for StrategyRpc services.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
public class StrategyRpcServer<SessionClazz>
        extends org.marketcetera.rpc.server.AbstractRpcService<SessionClazz,org.marketcetera.strategy.StrategyRpcServiceGrpc.StrategyRpcServiceImplBase>
{
    /* (non-Javadoc)
    * @see org.marketcetera.rpc.server.AbstractRpcService#getServiceDescription()
    */
    @Override
    protected String getServiceDescription()
    {
        return description;
    }
    /* (non-Javadoc)
    * @see org.marketcetera.rpc.server.AbstractRpcService#getService()
    */
    @Override
    protected org.marketcetera.strategy.StrategyRpcServiceGrpc.StrategyRpcServiceImplBase getService()
    {
        return service;
    }
    /**
     * Validate and start the object.
     */
    @javax.annotation.PostConstruct
    public void start()
            throws Exception
    {
        service = new Service();
        super.start();
    }
    /**
     * StrategyRpc Service implementation.
     *
     * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
     * @version $Id$
     * @since $Release$
     */
    private class Service
            extends org.marketcetera.strategy.StrategyRpcServiceGrpc.StrategyRpcServiceImplBase
    {
        /* (non-Javadoc)
         * @see org.marketcetera.strategy.StrategyRpcServiceGrpc.StrategyRpcServiceImplBase#login(org.marketcetera.rpc.base.BaseRpc.LoginRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void login(org.marketcetera.rpc.base.BaseRpc.LoginRequest inRequest,io.grpc.stub.StreamObserver<org.marketcetera.rpc.base.BaseRpc.LoginResponse> inResponseObserver)
        {
            StrategyRpcServer.this.doLogin(inRequest,inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.strategy.StrategyRpcServiceGrpc.StrategyRpcServiceImplBase#logout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void logout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest inRequest,io.grpc.stub.StreamObserver<org.marketcetera.rpc.base.BaseRpc.LogoutResponse> inResponseObserver)
        {
            StrategyRpcServer.this.doLogout(inRequest,inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.strategy.StrategyRpcServiceGrpc.StrategyRpcServiceImplBase#heartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void heartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest inRequest,io.grpc.stub.StreamObserver<org.marketcetera.rpc.base.BaseRpc.HeartbeatResponse> inResponseObserver)
        {
            StrategyRpcServer.this.doHeartbeat(inRequest,inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.strategy.StrategyRpcServiceGrpc.StrategyRpcServiceImplBase#getStrategyInstances(org.marketcetera.strategy.StrategyRpc.ReadStrategyInstancesRequest ,io.grpc.stub.StreamObserver)
         */
        @Override
        public void getStrategyInstances(org.marketcetera.strategy.StrategyRpc.ReadStrategyInstancesRequest inReadStrategyInstancesRequest,io.grpc.stub.StreamObserver<org.marketcetera.strategy.StrategyRpc.ReadStrategyInstancesResponse> inResponseObserver)
        {
            try {
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(StrategyRpcServer.this,"Received {}",inReadStrategyInstancesRequest);
                org.marketcetera.util.ws.stateful.SessionHolder<SessionClazz> sessionHolder = validateAndReturnSession(inReadStrategyInstancesRequest.getSessionId());
                authzService.authorize(sessionHolder.getUser(),StrategyPermissions.ReadStrategiesPermission.name());
                authzService.authorize(sessionHolder.getUser(),StrategyPermissions.LoadStrategyPermission.name());
                authzService.authorize(sessionHolder.getUser(),StrategyPermissions.UnloadStrategyPermission.name());
                authzService.authorize(sessionHolder.getUser(),StrategyPermissions.StartStrategyPermission.name());
                authzService.authorize(sessionHolder.getUser(),StrategyPermissions.StopStrategyPermission.name());
                org.marketcetera.strategy.StrategyRpc.ReadStrategyInstancesResponse.Builder responseBuilder = org.marketcetera.strategy.StrategyRpc.ReadStrategyInstancesResponse.newBuilder();
                //TODO return type
                java.util.Collection<org.marketcetera.strategy.StrategyInstance> serviceData = strategyService.getStrategyInstances();
                org.marketcetera.strategy.StrategyRpc.ReadStrategyInstancesResponse response = responseBuilder.build();
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(StrategyRpcServer.this,"Responding {}",response);
                inResponseObserver.onNext(response);
                inResponseObserver.onCompleted();
            } catch (Exception e) {
                handleError(e,inResponseObserver);
            }
        }
    }
    /**
     * provides access to authorization services
     */
    @org.springframework.beans.factory.annotation.Autowired
    private org.marketcetera.admin.service.AuthorizationService authzService;
    /**
     * provides services for Strategy
     */
    @org.springframework.beans.factory.annotation.Autowired
    private org.marketcetera.strategy.StrategyService strategyService;
    /**
     * provides the RPC service
     */
    private Service service;
    /**
     * description of this service
     */
    private final static String description = "Strategy RPC Service";
}
