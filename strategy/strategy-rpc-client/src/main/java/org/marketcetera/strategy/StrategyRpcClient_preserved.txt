//
// this file is automatically generated
//
package org.marketcetera.strategy;

/* $License$ */

/**
 * Provides an RPC Client for StrategyRpc services.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
@org.springframework.stereotype.Component
@org.springframework.context.annotation.Scope(org.springframework.beans.factory.config.ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class StrategyRpcClient
        extends org.marketcetera.rpc.client.AbstractRpcClient<org.marketcetera.strategy.StrategyRpcServiceGrpc.StrategyRpcServiceBlockingStub,org.marketcetera.strategy.StrategyRpcServiceGrpc.StrategyRpcServiceStub,StrategyRpcClientParameters>
        implements StrategyClient
{
    /* (non-Javadoc)
     * @see org.marketcetera.strategy.StrategyClient#getStrategyInstances()
     */
    @Override
    public java.util.Collection<? extends org.marketcetera.strategy.StrategyInstance> getStrategyInstances()
    {
        return executeCall(new java.util.concurrent.Callable<java.util.Collection<? extends org.marketcetera.strategy.StrategyInstance>>() {
            @Override
            public java.util.Collection<? extends org.marketcetera.strategy.StrategyInstance> call()
                    throws Exception
            {
                StrategyRpc.ReadStrategyInstancesRequest.Builder requestBuilder = StrategyRpc.ReadStrategyInstancesRequest.newBuilder();
                requestBuilder.setSessionId(getSessionId().getValue());
                StrategyRpc.ReadStrategyInstancesRequest request = requestBuilder.build();
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(StrategyRpcClient.this,"{} sending {}",getSessionId(),request);
                StrategyRpc.ReadStrategyInstancesResponse response = getBlockingStub().getStrategyInstances(request);
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(StrategyRpcClient.this,"{} received {}",getSessionId(),response);
                // TODO return value
                return null;
            }}
        );
    }
    /* (non-Javadoc)
     * @see org.marketcetera.strategy.StrategyClient#loadStrategyInstance(org.marketcetera.strategy.StrategyInstance)
     */
    @Override
    public org.marketcetera.strategy.StrategyStatus loadStrategyInstance(org.marketcetera.strategy.StrategyInstance inStrategyInstance)
    {
        return executeCall(new java.util.concurrent.Callable<org.marketcetera.strategy.StrategyStatus>() {
            @Override
            public org.marketcetera.strategy.StrategyStatus call()
                    throws Exception
            {
                StrategyRpc.LoadStrategyInstanceRequest.Builder requestBuilder = StrategyRpc.LoadStrategyInstanceRequest.newBuilder();
                requestBuilder.setSessionId(getSessionId().getValue());
                StrategyRpcUtil.getRpcStrategyInstance(inStrategyInstance).ifPresent(rpcValue->requestBuilder.setStrategyInstance(rpcValue));
                StrategyRpc.LoadStrategyInstanceRequest request = requestBuilder.build();
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(StrategyRpcClient.this,"{} sending {}",getSessionId(),request);
                StrategyRpc.LoadStrategyInstanceResponse response = getBlockingStub().loadStrategyInstance(request);
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(StrategyRpcClient.this,"{} received {}",getSessionId(),response);
                // TODO return value
                return null;
            }}
        );
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#getBlockingStub(io.grpc.Channel)
     */
    @Override
    protected org.marketcetera.strategy.StrategyRpcServiceGrpc.StrategyRpcServiceBlockingStub getBlockingStub(io.grpc.Channel inChannel)
    {
        return org.marketcetera.strategy.StrategyRpcServiceGrpc.newBlockingStub(inChannel);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#getAsyncStub(io.grpc.Channel)
     */
    @Override
    protected org.marketcetera.strategy.StrategyRpcServiceGrpc.StrategyRpcServiceStub getAsyncStub(io.grpc.Channel inChannel)
    {
        return org.marketcetera.strategy.StrategyRpcServiceGrpc.newStub(inChannel);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#executeLogin(org.marketcetera.rpc.base.BaseRpc.LoginRequest)
     */
    @Override
    protected org.marketcetera.rpc.base.BaseRpc.LoginResponse executeLogin(org.marketcetera.rpc.base.BaseRpc.LoginRequest inRequest)
    {
        return getBlockingStub().login(inRequest);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#executeLogout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest)
     */
    @Override
    protected org.marketcetera.rpc.base.BaseRpc.LogoutResponse executeLogout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest inRequest)
    {
        return getBlockingStub().logout(inRequest);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#executeHeartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest)
     */
    @Override
    protected org.marketcetera.rpc.base.BaseRpc.HeartbeatResponse executeHeartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest inRequest)
    {
        return getBlockingStub().heartbeat(inRequest);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#getAppId()
     */
    @Override
    protected org.marketcetera.util.ws.tags.AppId getAppId()
    {
        return APP_ID;
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#getVersionInfo()
     */
    @Override
    protected org.marketcetera.core.VersionInfo getVersionInfo()
    {
        return APP_ID_VERSION;
    }
    /**
     * Create a new StrategyRpc instance.
     *
     * @param inParameters a <code>StrategyRpcClientParameters</code> value
     */
    protected StrategyRpcClient(StrategyRpcClientParameters inParameters)
    {
        super(inParameters);
    }
    /**
     * The client's application ID: the application name.
     */
    public static final String APP_ID_NAME = "StrategyRpc"; //$NON-NLS-1$
    /**
     * The client's application ID: the version.
     */
    public static final org.marketcetera.core.VersionInfo APP_ID_VERSION = org.marketcetera.core.ApplicationVersion.getVersion(org.marketcetera.strategy.StrategyClient.class);
    /**
     * The client's application ID: the ID.
     */
    public static final org.marketcetera.util.ws.tags.AppId APP_ID = org.marketcetera.core.Util.getAppId(APP_ID_NAME,APP_ID_VERSION.getVersionInfo());
}
